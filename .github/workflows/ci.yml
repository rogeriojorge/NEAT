name: CI

on: [pull_request, push]

jobs:
  CI:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        test-type: [unit]

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: ls and pwd
      run: |
        id
        ls -l
        pwd
      
    - name: install requirements
      run: |
        sudo apt-get update
        sudo apt-get install -y git openmpi-bin libopenmpi-dev gcc-10 g++-10 gcc-10-base libnetcdf-dev libnetcdff-dev libhdf5-openmpi-dev hdf5-tools libgsl-dev libboost-dev doxygen libgoogle-perftools-dev  google-perftools
        sudo apt-get install -y libblas-dev liblapack-dev python3 python3-numpy python3-h5py pgplot5 libncarg-dev libscalapack-openmpi-dev python3-pip libnetcdf-c++4-dev cmake

    - name: Download the VMEC2000 standalone repository
      run: git clone https://github.com/hiddensymmetries/VMEC2000.git external/vmec

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: which python after python setup
      run: python --version

    - name: Install required python packages
      run: |
        alias pip=pip3
        alias python=python3
        python3 -m pip install --upgrade pip
        pip3 install matplotlib numpy scipy ninja cmake joblib scikit-build pybind11 f90wrap ninja toml mpi4py
    
    - name: env after adding python
      run: env

    - name: PWD
      run: pwd

    - name: ls
      run: ls

    - name: Install simsopt
      run: |
        pip3 install simsopt

    # - name: Try running simsopt
    #   run: |
    #     python3 -c "import simsopt; print('success')"

    # - name: ls
    #   run: ls

    # - name: Add to LD_LIBRARY_PATH so scalapack etc can be found
    #   run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV

    # - name: Configure and install VMEC2000 module
    #   run: |
    #     cd external/vmec
    #     cp cmake/machines/ubuntu.json cmake_config_file.json
    #     cat cmake_config_file.json
    #     pip3 install .

    # - name: Try importing vmec module
    #   run: python3 -c "print(dir()); import vmec; print(dir()); print(dir(vmec)); print('package:', vmec.__package__); print('spec:', vmec.__spec__); print('doc:', vmec.__doc__); print('file:', vmec.__file__);"

    # - name: ls
    #   run: ls

    - name: Install pyQSC
      run: |
        cd external
        git clone https://github.com/landreman/pyQSC.git
        cd pyQSC
        pip3 install .

    - name: Install pyQIC
      run: |
        cd external
        git clone https://github.com/rogeriojorge/pyQIC.git
        cd pyQIC
        pip3 install .

    - name: ls
      run: ls

    - name: Install NEAT
      run: |
        sed -i -e '7d' cmake_config_file.json
        sed -i -e '7i             "-DCMAKE_CXX_COMPILER=g++-10",\' cmake_config_file.json
        cat cmake_config_file.json
        python3 setup.py install

    - name: ls
      run: ls

    # - name: Try running simple
    #   run: |
    #     cd build/bin
    #     ./simple.x

    - name: Run unit tests
      run: |
        python3 -m unittest -v

    - name: Install coverage dependencies
      if: contains(matrix.test-type, 'unit')
      run: pip3 install coverage

    - name: Run tests on 1 process using coverage
      if: contains(matrix.test-type, 'unit')
      run: | 
        coverage run --source=neat -m unittest discover -t tests -v -s tests

    - name: Combine coverage reports
      if: contains(matrix.test-type, 'unit')
      run: | 
        coverage report
        coverage xml
      # coverage combine ## When several reports are generated, use this command before coverage report

    - name: Upload coverage to github
      if: contains(matrix.test-type, 'unit')
      uses: actions/upload-artifact@v2
      with:
        name: tox-gh-actions-coverage
        path: coverage.xml
        if-no-files-found: error

    - name: Upload coverage to Codecov
      # The last conditional on the next line prevents github from trying to upload to Codecov on forks of the repository, avoiding a permissions error
      if: contains(matrix.test-type, 'unit') && github.repository_owner == 'rogeriojorge'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true